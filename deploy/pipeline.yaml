AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  DevPrefix:
    Type: String
    Default: ""

  AppName:
    Type: String
    AllowedPattern: "[A-Za-z0-9-]+"

  GitHubOAuthToken:
    Type: String
    NoEcho: true
    MinLength: 40
    MaxLength: 40
    #AllowedPattern: '[a-z0-9]*'

  GitHubOwner:
    Type: String
    Default: ferrumnet
    AllowedPattern: "[A-Za-z0-9-]+"

  GitHubRepo:
    Type: String
    Default: hello-world
    AllowedPattern: "[A-Za-z0-9-]+"

  GitHubBranch:
    Type: String
    Default: master
    # AllowedPattern: "[A-Za-z0-9-]+"

  PipelineArtifactsBucket:
    Type: String
    Default: ferrum-pipeline-artifacts
    AllowedPattern: "[A-Za-z0-9-]+"

  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - qa
      - stage
      - prod

  CodebuildImage:
    Type: String
    Default: 'aws/codebuild/standard:5.0'

Resources:
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineArtifactsBucket
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
      - Name: Source
        Actions:
        - Name: Source
          InputArtifacts: []
          ActionTypeId:
            Category: Source
            Owner: ThirdParty
            Version: 1
            Provider: GitHub
          OutputArtifacts:
          - Name: SourceCode
          Configuration:
            Owner: !Ref GitHubOwner
            Repo: !Ref GitHubRepo
            Branch: !Ref GitHubBranch
            PollForSourceChanges: false
            OAuthToken: !Ref GitHubOAuthToken
          RunOrder: 1
      - Name: Build
        Actions:
        - Name: Build
          ActionTypeId:
            Category: Build
            Owner: AWS
            Provider: CodeBuild
            Version: '1'
          Configuration:
            ProjectName: !Ref CodeBuildProject
          InputArtifacts:
            - Name: SourceCode
          OutputArtifacts:
            - Name: BuildArtifacts
          RunOrder: '2'
      - Name: Release
        Actions:
          # - Name: PackageReleaseChangeset
          #   InputArtifacts:
          #       - Name: BuildArtifacts
          #   OutputArtifacts: []
          #   ActionTypeId:
          #     Category: Deploy
          #     Owner: AWS
          #     Version: "1"
          #     Provider: CloudFormation
          #   Configuration:
          #     StackName: !Sub "${DevPrefix}${AppName}-${Environment}"
          #     TemplateConfiguration: BuildArtifacts::app-deploy.json
          #     TemplatePath: !Sub "BuildArtifacts::deploy/cloudformation/application.yaml"
          #     ActionMode: CHANGE_SET_REPLACE
          #     ChangeSetName: !Sub ${DevPrefix}${AppName}-${Environment}-changeset
          #     RoleArn: !GetAtt CloudformationRole.Arn
          #     Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
          #   RunOrder: 3
          # - Name: ExecuteReleaseChangeset
          #   InputArtifacts: []
          #   OutputArtifacts: []
          #   ActionTypeId:
          #     Category: Deploy
          #     Owner: AWS
          #     Provider: CloudFormation
          #     Version: "1"
          #   Configuration:
          #     StackName: !Sub "${DevPrefix}${AppName}-${Environment}"
          #     ActionMode: CHANGE_SET_EXECUTE
          #     ChangeSetName: !Sub ${DevPrefix}${AppName}-${Environment}-changeset
          #     Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
          #   RunOrder: 4
          - Name: CodeDeploy
            InputArtifacts:
              - Name: SourceCode
            Name: Ec2-Deploy
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Version: '1'
              Provider: CodeDeploy
            OutputArtifacts: []
            Configuration:
              ApplicationName: !Ref WebappApplication
              DeploymentGroupName: !Ref WebappDeploymentGroup
            RunOrder: 5

  WebappApplication: 
    Type: AWS::CodeDeploy::Application 
    Properties:
      ComputePlatform: Server
  WebappDeploymentGroup:
    Type: "AWS::CodeDeploy::DeploymentGroup"
    Properties:
      ApplicationName: !Ref WebappApplication
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      Ec2TagFilters:
        - Key: "Name"
          Value: !Sub "${DevPrefix}${AppName}-${Environment}"
          Type: KEY_AND_VALUE

  CodeDeployRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "codedeploy.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        -
          PolicyName: allow-autoscaling
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: Allow
                Action:
                  - ec2:*
                  - autoscaling:*
                Resource: "*"


  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${DevPrefix}${AppName}-${Environment}"
      ServiceRole: !Ref CodeBuildRole
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: deploy/codebuild/pre-deploy-buildspec.yaml
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: !Ref CodebuildImage
        Type: LINUX_CONTAINER
        EnvironmentVariables:
        - Name: DevPrefix
          Value: !Ref DevPrefix
        - Name: AppName
          Value: !Ref AppName
        - Name: Environment
          Value: !Ref Environment
        - Name: PipelineArtifactsBucket
          Value: !Ref PipelineArtifactsBucket
      TimeoutInMinutes: 10

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  # 'GithubWebhook' satisfies two requirements:
  # -- Means that updates are pushed from GitHub, rather than AWS having to poll
  # -- Means we can filter for required changes
  GithubWebhook:
    Type: 'AWS::CodePipeline::Webhook'
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubOAuthToken
      RegisterWithThirdParty: 'true'
      Filters:
      - JsonPath: "$.ref"
        MatchEquals: refs/heads/{Branch}
      TargetPipeline: !Ref CodePipeline
      TargetAction: Source
      TargetPipelineVersion: !GetAtt CodePipeline.Version

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess #TODO: Reduce permissions
    DependsOn: Ec2Instance

  CloudformationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: cloudformation.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess #TODO: Reduce permissions

  Ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0fb653ca2d3203ac1 # ImageID valid only in us-east-1 region
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            sudo apt update
            sudo apt install docker.io ruby-full wget -y
            wget https://aws-codedeploy-us-east-2.s3.us-east-2.amazonaws.com/latest/install
            chmod +x ./install
            sudo ./install auto > /tmp/logfile
            sudo service codedeploy-agent start

      InstanceType: t2.micro
      IamInstanceProfile: !Ref Ec2InstanceProfile
        # KeyName: jenna # <-- Change to use your key-pair name
      SecurityGroupIds:
        - !Ref Ec2SecurityGroup
      Tags:
        - Key: "Name"
          Value: !Sub "${DevPrefix}${AppName}-${Environment}"

  
  Ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [webapp-security-group, dev]]
      GroupDescription: "Allow HTTP/HTTPS and SSH inbound and outbound traffic"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0 

  IamRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "Ec2RoleForSSM"
      Description: "EC2 IAM role for SSM access"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
      Policies: []
  Ec2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: "Ec2RoleForSSM"
      Roles:
        - Ref: "IamRole"
     